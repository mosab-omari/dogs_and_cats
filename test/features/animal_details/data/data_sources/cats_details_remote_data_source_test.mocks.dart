// Mocks generated by Mockito 5.4.4 from annotations
// in algooru_flutter_assessment/test/features/animal_details/data/data_sources/cats_details_remote_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:algooru_flutter_assessment/core/api/client/client.dart' as _i4;
import 'package:algooru_flutter_assessment/core/api/core_models/network/remote_data_source_params.dart'
    as _i5;
import 'package:algooru_flutter_assessment/core/api/core_models/response_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T> extends _i1.SmartFake implements _i2.Future<T> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient<Model extends _i3.ResponseModel> extends _i1.Mock
    implements _i4.Client<Model> {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Future<Model> request(_i5.RemoteDataSourceParams<dynamic>? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [params],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<Model>(
                this,
                Invocation.method(
                  #request,
                  [params],
                ),
              ),
              (Model v) => _i2.Future<Model>.value(v),
            ) ??
            _FakeFuture_0<Model>(
              this,
              Invocation.method(
                #request,
                [params],
              ),
            ),
      ) as _i2.Future<Model>);
}
